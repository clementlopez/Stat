normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 10
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
x <- c(0.22,1.64,5.06,0.24,1.96,6.41,0.29,2.27,7.58,0.29,2.44,7.81,0.33,2.75,8.00,0.47,2.99,8.24,0.85,3.15,10.15,1.14,3.85,12.24,1.50,4.66,13.78,1.51,5.04,16.12)
expQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e],log(1-seq(1:e)/(e+1)),ylim=c(-2.5,0.1), main="Q-Q Plot for exp law")
abline(v=0)
abline(h=0)
}
normQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qnorm(seq(1:e)/(e+1)), main="Q-Q Plot for normal law")
abline(h=0)
}
uniQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qunif(seq(1:e)/(e+1)), main="Q-Q Plot for uni law")
abline(v=0)
abline(h=0)
}
fAllQQPlot <- function(x){
expQQplot(x)
normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 10
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
tp1_exo1 = function(x) {
x = sort(x);
nb_classe = round(1 + log2(length(x)));
borne_basse = x[1] - 0.025*(x[length(x)] - x[1]);
borne_haute = x[length(x)] + 0.025*(x[length(x)] - x[1]);
par(mfrow=c(3,3));
histx = hist(x, prob=T, breaks=seq(borne_basse, borne_haute, length = nb_classe+1), main = "Classe de meme largeur");
lines(histx$mids, histx$density, lwd=3);
histx = hist(x, prob=T, breaks=c(borne_basse, quantile(x,seq(1,nb_classe-1)/nb_classe),borne_haute), main="Classe de meme effectif");
lines(histx$mids, histx$density, lwd=3);
plot(ecdf(x), main="Fonction de repartition empririque");
size = length(x);
plot(x[1:(size-1)],log(1-seq(1:(size-1))/size), main="Graphe de probabilite exponentiel");
abline(lm(log(1-seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qnorm(seq(1:(size-1))/size), main="Graphe de probabilite normal");
abline(lm(qnorm(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qunif(seq(1:(size-1))/size), main="Graphe de probabilite uniforme");
abline(lm(qunif(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
}
simulation = function(lambdaest) {
lambda = lambdaest;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
donnees <- c(0.22, 0.24, 0.29, 0.29, 0.33, 0.47, 0.85, 1.14, 1.50, 1.51, 1.64, 1.96, 2.27, 2.44, 2.75, 2.99, 3.15, 3.85, 4.66, 5.04)
tp1_exo1(donnees)
plot(donnees)
#1/estmation = moyenne
moyDonnees = sum(donnees)
lambdaEst <- 20/moyDonnees
thetaEst = 1/lambdaEst
print(lambdaEst)
# On cherche maintenant le vrai lambda on va chercher le biais grace Ã  la simulation
simulation(lambdaest)
w <- rexp(1000, rate=lambdaEst)
w = sort(w)
plot(w)
x <- c(0.22,1.64,5.06,0.24,1.96,6.41,0.29,2.27,7.58,0.29,2.44,7.81,0.33,2.75,8.00,0.47,2.99,8.24,0.85,3.15,10.15,1.14,3.85,12.24,1.50,4.66,13.78,1.51,5.04,16.12)
expQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e],log(1-seq(1:e)/(e+1)),ylim=c(-2.5,0.1), main="Q-Q Plot for exp law")
abline(v=0)
abline(h=0)
}
normQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qnorm(seq(1:e)/(e+1)), main="Q-Q Plot for normal law")
abline(h=0)
}
uniQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qunif(seq(1:e)/(e+1)), main="Q-Q Plot for uni law")
abline(v=0)
abline(h=0)
}
fAllQQPlot <- function(x){
expQQplot(x)
normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 30
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
x <- c(0.22,1.64,5.06,0.24,1.96,6.41,0.29,2.27,7.58,0.29,2.44,7.81,0.33,2.75,8.00,0.47,2.99,8.24,0.85,3.15,10.15,1.14,3.85,12.24,1.50,4.66,13.78,1.51,5.04,16.12)
expQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e],log(1-seq(1:e)/(e+1)),ylim=c(-2.5,0.1), main="Q-Q Plot for exp law")
abline(v=0)
abline(h=0)
}
normQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qnorm(seq(1:e)/(e+1)), main="Q-Q Plot for normal law")
abline(h=0)
}
uniQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qunif(seq(1:e)/(e+1)), main="Q-Q Plot for uni law")
abline(v=0)
abline(h=0)
}
fAllQQPlot <- function(x){
expQQplot(x)
normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 30
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
x <- c(0.22,1.64,5.06,0.24,1.96,6.41,0.29,2.27,7.58,0.29,2.44,7.81,0.33,2.75,8.00,0.47,2.99,8.24,0.85,3.15,10.15,1.14,3.85,12.24,1.50,4.66,13.78,1.51,5.04,16.12)
expQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e],log(1-seq(1:e)/(e+1)),ylim=c(-2.5,0.1), main="Q-Q Plot for exp law")
abline(v=0)
abline(h=0)
}
normQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qnorm(seq(1:e)/(e+1)), main="Q-Q Plot for normal law")
abline(h=0)
}
uniQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qunif(seq(1:e)/(e+1)), main="Q-Q Plot for uni law")
abline(v=0)
abline(h=0)
}
fAllQQPlot <- function(x){
expQQplot(x)
normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 300
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
x <- c(0.22,1.64,5.06,0.24,1.96,6.41,0.29,2.27,7.58,0.29,2.44,7.81,0.33,2.75,8.00,0.47,2.99,8.24,0.85,3.15,10.15,1.14,3.85,12.24,1.50,4.66,13.78,1.51,5.04,16.12)
expQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e],log(1-seq(1:e)/(e+1)),ylim=c(-2.5,0.1), main="Q-Q Plot for exp law")
abline(v=0)
abline(h=0)
}
normQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qnorm(seq(1:e)/(e+1)), main="Q-Q Plot for normal law")
abline(h=0)
}
uniQQplot <- function(x) {
e=length(x)
plot(sort(x)[1:e], qunif(seq(1:e)/(e+1)), main="Q-Q Plot for uni law")
abline(v=0)
abline(h=0)
}
fAllQQPlot <- function(x){
expQQplot(x)
normQQplot(x)
uniQQplot(x)
}
#Moyenne empirique
moy <- mean(x)
#
lambda = 1/moy
simuExp <- function(nIt){
lambdaSim <- 0
lambda <- 30
scoreDispersion <- 0
for(i in 1:nIt){
vect <- rexp(30, lambda)
lambdaSim <- 1/mean(vect) + lambdaSim
scoreDispersion <- scoreDispersion + abs(lambdaSim-lambda)
}
lambdaSim <- lambdaSim/nIt
cat(lambdaSim)
cat("\nbiais = ", ((lambdaSim/lambda)*100)-100, "%")
cat("\nScore dispersion = ", scoreDispersion)
}
simuExp(10000)
#lambdaSim != lambda donc biais
#calculBiais = (LambdaSim/LambdaRExp)*100
#calculConvergence -> FAIRE UNE SEULE SIMU
simuExp(1)
tp1_exo1 = function(x) {
x = sort(x);
nb_classe = round(1 + log2(length(x)));
borne_basse = x[1] - 0.025*(x[length(x)] - x[1]);
borne_haute = x[length(x)] + 0.025*(x[length(x)] - x[1]);
par(mfrow=c(3,3));
histx = hist(x, prob=T, breaks=seq(borne_basse, borne_haute, length = nb_classe+1), main = "Classe de meme largeur");
lines(histx$mids, histx$density, lwd=3);
histx = hist(x, prob=T, breaks=c(borne_basse, quantile(x,seq(1,nb_classe-1)/nb_classe),borne_haute), main="Classe de meme effectif");
lines(histx$mids, histx$density, lwd=3);
plot(ecdf(x), main="Fonction de repartition empririque");
size = length(x);
plot(x[1:(size-1)],log(1-seq(1:(size-1))/size), main="Graphe de probabilite exponentiel");
abline(lm(log(1-seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qnorm(seq(1:(size-1))/size), main="Graphe de probabilite normal");
abline(lm(qnorm(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qunif(seq(1:(size-1))/size), main="Graphe de probabilite uniforme");
abline(lm(qunif(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
}
simulation = function(lambdaest) {
lambda = lambdaest;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
donnees <- c(0.22, 0.24, 0.29, 0.29, 0.33, 0.47, 0.85, 1.14, 1.50, 1.51, 1.64, 1.96, 2.27, 2.44, 2.75, 2.99, 3.15, 3.85, 4.66, 5.04)
tp1_exo1(donnees)
plot(donnees)
#1/estmation = moyenne
moyDonnees = sum(donnees)
lambdaEst <- 20/moyDonnees
thetaEst = 1/lambdaEst
print(lambdaEst)
# On cherche maintenant le vrai lambda on va chercher le biais grace Ã  la simulation
simulation(lambdaest)
w <- rexp(1000, rate=lambdaEst)
w = sort(w)
plot(w)
simulation = function() {
lambda = 1000;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
tp1_exo1 = function(x) {
x = sort(x);
nb_classe = round(1 + log2(length(x)));
borne_basse = x[1] - 0.025*(x[length(x)] - x[1]);
borne_haute = x[length(x)] + 0.025*(x[length(x)] - x[1]);
par(mfrow=c(3,3));
histx = hist(x, prob=T, breaks=seq(borne_basse, borne_haute, length = nb_classe+1), main = "Classe de meme largeur");
lines(histx$mids, histx$density, lwd=3);
histx = hist(x, prob=T, breaks=c(borne_basse, quantile(x,seq(1,nb_classe-1)/nb_classe),borne_haute), main="Classe de meme effectif");
lines(histx$mids, histx$density, lwd=3);
plot(ecdf(x), main="Fonction de repartition empririque");
size = length(x);
plot(x[1:(size-1)],log(1-seq(1:(size-1))/size), main="Graphe de probabilite exponentiel");
abline(lm(log(1-seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qnorm(seq(1:(size-1))/size), main="Graphe de probabilite normal");
abline(lm(qnorm(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qunif(seq(1:(size-1))/size), main="Graphe de probabilite uniforme");
abline(lm(qunif(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
}
simulation = function(lambdaest) {
lambda = lambdaest;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
donnees <- c(0.22, 0.24, 0.29, 0.29, 0.33, 0.47, 0.85, 1.14, 1.50, 1.51, 1.64, 1.96, 2.27, 2.44, 2.75, 2.99, 3.15, 3.85, 4.66, 5.04)
tp1_exo1(donnees)
plot(donnees)
#1/estmation = moyenne
moyDonnees = sum(donnees)
lambdaEst <- 20/moyDonnees
thetaEst = 1/lambdaEst
print(lambdaEst)
# On cherche maintenant le vrai lambda on va chercher le biais grace Ã  la simulation
simulation(lambdaest)
w <- rexp(1000, rate=lambdaEst)
w = sort(w)
plot(w)
tp1_exo1 = function(x) {
x = sort(x);
nb_classe = round(1 + log2(length(x)));
borne_basse = x[1] - 0.025*(x[length(x)] - x[1]);
borne_haute = x[length(x)] + 0.025*(x[length(x)] - x[1]);
par(mfrow=c(3,3));
histx = hist(x, prob=T, breaks=seq(borne_basse, borne_haute, length = nb_classe+1), main = "Classe de meme largeur");
lines(histx$mids, histx$density, lwd=3);
histx = hist(x, prob=T, breaks=c(borne_basse, quantile(x,seq(1,nb_classe-1)/nb_classe),borne_haute), main="Classe de meme effectif");
lines(histx$mids, histx$density, lwd=3);
plot(ecdf(x), main="Fonction de repartition empririque");
size = length(x);
plot(x[1:(size-1)],log(1-seq(1:(size-1))/size), main="Graphe de probabilite exponentiel");
abline(lm(log(1-seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qnorm(seq(1:(size-1))/size), main="Graphe de probabilite normal");
abline(lm(qnorm(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qunif(seq(1:(size-1))/size), main="Graphe de probabilite uniforme");
abline(lm(qunif(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
}
simulation = function(lambdaest) {
lambda = lambdaest;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
donnees <- c(0.22, 0.24, 0.29, 0.29, 0.33, 0.47, 0.85, 1.14, 1.50, 1.51, 1.64, 1.96, 2.27, 2.44, 2.75, 2.99, 3.15, 3.85, 4.66, 5.04)
tp1_exo1(donnees)
plot(donnees)
#1/estmation = moyenne
moyDonnees = sum(donnees)
lambdaEst <- 20/moyDonnees
thetaEst = 1/lambdaEst
print(lambdaEst)
# On cherche maintenant le vrai lambda on va chercher le biais grace Ã  la simulation
simulation(lambdaest)
w <- rexp(1000, rate=lambdaEst)
w = sort(w)
plot(w)
tp1_exo1 = function(x) {
x = sort(x);
nb_classe = round(1 + log2(length(x)));
borne_basse = x[1] - 0.025*(x[length(x)] - x[1]);
borne_haute = x[length(x)] + 0.025*(x[length(x)] - x[1]);
par(mfrow=c(3,3));
histx = hist(x, prob=T, breaks=seq(borne_basse, borne_haute, length = nb_classe+1), main = "Classe de meme largeur");
lines(histx$mids, histx$density, lwd=3);
histx = hist(x, prob=T, breaks=c(borne_basse, quantile(x,seq(1,nb_classe-1)/nb_classe),borne_haute), main="Classe de meme effectif");
lines(histx$mids, histx$density, lwd=3);
plot(ecdf(x), main="Fonction de repartition empririque");
size = length(x);
plot(x[1:(size-1)],log(1-seq(1:(size-1))/size), main="Graphe de probabilite exponentiel");
abline(lm(log(1-seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qnorm(seq(1:(size-1))/size), main="Graphe de probabilite normal");
abline(lm(qnorm(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
plot(x[1:(size-1)], qunif(seq(1:(size-1))/size), main="Graphe de probabilite uniforme");
abline(lm(qunif(seq(1:(size-1))/size) ~ x[1:(size-1)]), col = "red")
abline(v=0);
abline(h=0);
}
simulation = function(lambdaest) {
lambda = lambdaest;
results = c();
n = 30;
for(i in 1:10000) {
x = rexp(n, lambda);
results = c(results, 1/mean(x));
}
print(paste("Moyenne biaisee", mean(results)));
print(paste("Moyenne", mean(results)*(n-1)/n));
}
donnees <- c(0.22, 0.24, 0.29, 0.29, 0.33, 0.47, 0.85, 1.14, 1.50, 1.51, 1.64, 1.96, 2.27, 2.44, 2.75, 2.99, 3.15, 3.85, 4.66, 5.04)
tp1_exo1(donnees)
plot(donnees)
#1/estmation = moyenne
moyDonnees = sum(donnees)
lambdaEst <- 20/moyDonnees
thetaEst = 1/lambdaEst
print(lambdaEst)
# On cherche maintenant le vrai lambda on va chercher le biais grace Ã  la simulation
simulation(lambdaEst)
w <- rexp(1000, rate=lambdaEst)
w = sort(w)
plot(w)
